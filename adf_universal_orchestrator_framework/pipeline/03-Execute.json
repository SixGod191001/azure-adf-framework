{
	"name": "03-Execute",
	"properties": {
		"description": "execute pipeline used to check when the processing pipeline called by the Child completes and passes the resulting status back to the metadata database.",
		"activities": [
			{
				"name": "Get Pipeline Params",
				"description": "Returns any parameters from metadata required for the processing pipeline being called. The output can be an empty string if no parameters are required.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Set Subscription Id",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Resource Group Name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[metadata].[GetPipelineParameters]",
						"storedProcedureParameters": {
							"PipelineId": {
								"type": "Int32",
								"value": {
									"value": "@pipeline().parameters.pipelineId",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Log Pipeline Running",
				"description": "Sets the current pipeline with a status of running within the current execution database table.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[metadata].[SetLogPipelineRunning]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Log Execute Activity Failure",
				"description": "Handle true failures from calling out to the execute activity and update the current execution table accordingly so a restart can occur.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Execute Worker",
						"dependencyConditions": [
							"Failed"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[metadata].[SetLogActivityFailed]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CallingActivity": {
							"value": "ExecuteWorkerPipeline",
							"type": "String"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Update Run Id",
				"description": "Provide the actual ADF run ID back to the current execution table for long term logging and alignment between the metadata other Azure monitoring tools.",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Set Run Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[metadata].[SetLogPipelineRunId]",
					"storedProcedureParameters": {
						"ExecutionId": {
							"value": {
								"value": "@pipeline().parameters.ExecutionId",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"PipelineId": {
							"value": {
								"value": "@pipeline().parameters.pipelineId",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"RunId": {
							"value": {
								"value": "@variables('WorkerRunId')",
								"type": "Expression"
							},
							"type": "Guid"
						},
						"StageId": {
							"value": {
								"value": "@pipeline().parameters.StageId",
								"type": "Expression"
							},
							"type": "Int32"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "SupportDatabase",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Wait Until Pipeline Completes",
				"description": "Loops until the Worker pipeline called completes.\n\nSimple status:\n- Running = new iteration.\n- Done = break.",
				"type": "Until",
				"dependsOn": [
					{
						"activity": "Get Wait Duration",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Run Id",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"expression": {
						"value": "@variables('WorkerPipelineState')",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "Set Last Check DateTime",
							"description": "Update the current execution table with a date time from when the Worker pipeline status was last checked as part of the Until iterations.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[metadata].[SetLogPipelineLastStatusCheck]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Log Check Function Activity Failure",
							"description": "Report to the current execution table that the framework pipeline activity has failed. This failure is outside of the scope of the framework and is probably related to a wider platform problem.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Failed"
									]
								}
							],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[metadata].[SetLogActivityFailed]",
								"storedProcedureParameters": {
									"CallingActivity": {
										"value": "GetWorkerPipelineStatus",
										"type": "String"
									},
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						},
						{
							"name": "Set Worker State",
							"description": "Set the bool state of the Worker pipeline to be used by the Until and If expressions. True = Complete, False = Running.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Worker Pipeline Status",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "WorkerPipelineState",
								"value": {
									"value": "@not(or(equals(activity('Get Worker Pipeline Status').output.status, 'InProgress'), equals(activity('Get Worker Pipeline Status').output.status, 'Queued')))\n",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Get Worker Pipeline Status",
							"type": "WebActivity",
							"dependsOn": [
								{
									"activity": "Set Subscription Id1",
									"dependencyConditions": [
										"Succeeded"
									]
								},
								{
									"activity": "Set Resource Group Name1",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"method": "GET",
								"url": {
									"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelineruns/@{variables('WorkerRunId')}?api-version=2018-06-01",
									"type": "Expression"
								},
								"authentication": {
									"type": "MSI",
									"resource": {
										"value": "https://management.core.windows.net/",
										"type": "Expression"
									}
								}
							}
						},
						{
							"name": "Get Framework Orchestrator Details - wait until",
							"type": "Lookup",
							"dependsOn": [],
							"policy": {
								"timeout": "0.12:00:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"source": {
									"type": "AzureSqlSource",
									"sqlReaderStoredProcedureName": "[metadata].[GetFrameworkOrchestratorDetails]",
									"storedProcedureParameters": {
										"CallingOrchestratorName": {
											"type": "String",
											"value": {
												"value": "@pipeline().DataFactory",
												"type": "Expression"
											}
										}
									},
									"queryTimeout": "02:00:00",
									"partitionOption": "None"
								},
								"dataset": {
									"referenceName": "GetSetMetadata",
									"type": "DatasetReference"
								}
							}
						},
						{
							"name": "Set Subscription Id1",
							"description": "Set the subscription Id value to a local variable for use in various downstream activities.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Framework Orchestrator Details - wait until",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "SubscriptionId",
								"value": {
									"value": "@activity('Get Framework Orchestrator Details - wait until').output.firstRow.SubscriptionId",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Set Resource Group Name1",
							"description": "Set the resource group name value to a local variable for use in various downstream activities.",
							"type": "SetVariable",
							"dependsOn": [
								{
									"activity": "Get Framework Orchestrator Details - wait until",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"policy": {
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"variableName": "ResourceGroupName",
								"value": {
									"value": "@activity('Get Framework Orchestrator Details - wait until').output.firstRow.ResourceGroupName",
									"type": "Expression"
								}
							}
						},
						{
							"name": "Wait If Running",
							"description": "True = Do nothing.\nFalse = Wait, before the next iteration.",
							"type": "IfCondition",
							"dependsOn": [
								{
									"activity": "Set Worker State",
									"dependencyConditions": [
										"Succeeded"
									]
								}
							],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@variables('WorkerPipelineState')",
									"type": "Expression"
								},
								"ifFalseActivities": [
									{
										"name": "Wait for Pipeline",
										"description": "The processing pipeline is still running so Wait before checking its status again.",
										"type": "Wait",
										"dependsOn": [],
										"userProperties": [],
										"typeProperties": {
											"waitTimeInSeconds": {
												"value": "@activity('Get Wait Duration').output.firstRow.PropertyValue",
												"type": "Expression"
											}
										}
									}
								]
							}
						}
					],
					"timeout": "0.00:10:00"
				}
			},
			{
				"name": "Set Pipeline Result",
				"description": "Receives the outcome from the function execution for a given processing pipeline and updates the current execution table with different pipelines status values depending on the result (case).",
				"type": "Switch",
				"dependsOn": [
					{
						"activity": "Wait Until Pipeline Completes",
						"dependencyConditions": [
							"Completed"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"on": {
						"value": "@activity('Get Worker Pipeline Status').output.status",
						"type": "Expression"
					},
					"cases": [
						{
							"value": "Succeeded",
							"activities": [
								{
									"name": "Pipeline Status Succeeded",
									"description": "Updates the current execution table with a pipeline status of success if the function outcome is succeeded.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[metadata].[SetLogPipelineSuccess]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						},
						{
							"value": "Failed",
							"activities": [
								{
									"name": "Pipeline Status Failed",
									"description": "Updates the current execution table with a pipeline status of failed if the function outcome is failed. Also blocks pipelines in the downstream execution stage.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[metadata].[SetLogPipelineFailed]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"RunId": {
												"value": {
													"value": "@variables('WorkerRunId')",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Log Error Details",
									"description": "Parses pipeline error details and persists them to the metadata database error log table.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Set Error Detail Variable",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[metadata].[SetErrorLogDetails]",
										"storedProcedureParameters": {
											"JsonErrorDetails": {
												"value": {
													"value": "@variables('ErrorJson')",
													"type": "Expression"
												},
												"type": "String"
											},
											"LocalExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								},
								{
									"name": "Set Subscription Id- Set Pipeline Result - Failed",
									"description": "Set the subscription Id value to a local variable for use in various downstream activities.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Framework Orchestrator Details  Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "SubscriptionId",
										"value": {
											"value": "@activity('Get Framework Orchestrator Details  Failed').output.firstRow.SubscriptionId",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set Resource Group Name- Set Pipeline Result - Failed",
									"description": "Set the resource group name value to a local variable for use in various downstream activities.",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Framework Orchestrator Details  Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ResourceGroupName",
										"value": {
											"value": "@activity('Get Framework Orchestrator Details  Failed').output.firstRow.ResourceGroupName",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Get Framework Orchestrator Details  Failed",
									"description": "Using the metadata orchestrators return details about the resource running the framework pipelines.",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[metadata].[GetFrameworkOrchestratorDetails]",
											"storedProcedureParameters": {
												"CallingOrchestratorName": {
													"type": "String",
													"value": {
														"value": "@pipeline().DataFactory",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "GetSetMetadata",
											"type": "DatasetReference"
										}
									}
								},
								{
									"name": "Get Worker Pipeline Error Details",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set Subscription Id- Set Pipeline Result - Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set Resource Group Name- Set Pipeline Result - Failed",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"url": {
											"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelineruns/@{variables('WorkerRunId')}/queryActivityruns?api-version=2018-06-01",
											"type": "Expression"
										},
										"body": {
											"value": "{\n  \"lastUpdatedAfter\": \"@{adddays(utcnow(),int(variables('QueryRunDays')))}\",\n  \"lastUpdatedBefore\": \"@{utcnow()}\",\n  \"filters\":[\n             {\"operand\":\"Status\",\"operator\":\"Equals\",\"values\": \n              [\"Failed\"]\n             },\n            ],\n  \"orderBy\":[{\"orderBy\":\"ActivityRunEnd\",\"order\":\"DESC\"}]\n  }\n  \n  }",
											"type": "Expression"
										},
										"authentication": {
											"type": "MSI",
											"resource": {
												"value": "https://management.azure.com/",
												"type": "Expression"
											}
										}
									}
								},
								{
									"name": "Set Error Detail Variable",
									"type": "SetVariable",
									"dependsOn": [
										{
											"activity": "Get Worker Pipeline Error Details",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "ErrorJson",
										"value": {
											"value": "@string(json(string(activity('Get Worker Pipeline Error Details').output)).value[0])",
											"type": "Expression"
										}
									}
								}
							]
						},
						{
							"value": "Cancelled",
							"activities": [
								{
									"name": "Pipeline Status Cancelled",
									"description": "Updates the current execution table with a pipeline status of cancelled if the function outcome is cancelled.",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "0.00:10:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[metadata].[SetLogPipelineCancelled]",
										"storedProcedureParameters": {
											"ExecutionId": {
												"value": {
													"value": "@pipeline().parameters.executionId",
													"type": "Expression"
												},
												"type": "Guid"
											},
											"PipelineId": {
												"value": {
													"value": "@pipeline().parameters.pipelineId",
													"type": "Expression"
												},
												"type": "Int32"
											},
											"StageId": {
												"value": {
													"value": "@pipeline().parameters.stageId",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SupportDatabase",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					],
					"defaultActivities": [
						{
							"name": "Pipeline Status Unknown",
							"description": "Updates the current execution table with a pipeline status of unknown if the function returns an unexpected outcome.",
							"type": "SqlServerStoredProcedure",
							"dependsOn": [],
							"policy": {
								"timeout": "0.00:10:00",
								"retry": 0,
								"retryIntervalInSeconds": 30,
								"secureOutput": false,
								"secureInput": false
							},
							"userProperties": [],
							"typeProperties": {
								"storedProcedureName": "[metadata].[SetLogPipelineUnknown]",
								"storedProcedureParameters": {
									"ExecutionId": {
										"value": {
											"value": "@pipeline().parameters.executionId",
											"type": "Expression"
										},
										"type": "Guid"
									},
									"PipelineId": {
										"value": {
											"value": "@pipeline().parameters.pipelineId",
											"type": "Expression"
										},
										"type": "Int32"
									},
									"StageId": {
										"value": {
											"value": "@pipeline().parameters.stageId",
											"type": "Expression"
										},
										"type": "Int32"
									}
								}
							},
							"linkedServiceName": {
								"referenceName": "SupportDatabase",
								"type": "LinkedServiceReference"
							}
						}
					]
				}
			},
			{
				"name": "Get Wait Duration",
				"description": "Return wait duration in seconds from database properties table to be used during each Until iteration when the Worker pipeline is still running.",
				"type": "Lookup",
				"dependsOn": [
					{
						"activity": "Execute Worker",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[metadata].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "PipelineStatusCheckDuration"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Run Id",
				"description": "Set local variable from activity output once for value reuse in downstream activities.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Execute Worker",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "WorkerRunId",
					"value": {
						"value": "@activity('Execute Worker').output.runId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Execute Worker",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "Get Pipeline Params",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Log Pipeline Running",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "Set Query Run Days",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": {
						"value": "https://management.azure.com/subscriptions/@{variables('SubscriptionId')}/resourceGroups/@{variables('ResourceGroupName')}/providers/Microsoft.DataFactory/factories/@{pipeline().DataFactory}/pipelines/@{pipeline().parameters.PipelineName}/createRun?api-version=2018-06-01",
						"type": "Expression"
					},
					"body": {
						"value": "@activity('Get Pipeline Params').output.firstRow",
						"type": "Expression"
					},
					"authentication": {
						"type": "MSI",
						"resource": {
							"value": "https://management.core.windows.net/",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Get Framework Orchestrator Details 03 execute",
				"description": "Using the metadata orchestrators return details about the resource running the framework pipelines.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[metadata].[GetFrameworkOrchestratorDetails]",
						"storedProcedureParameters": {
							"CallingOrchestratorName": {
								"type": "String",
								"value": {
									"value": "@pipeline().DataFactory",
									"type": "Expression"
								}
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Subscription Id",
				"description": "Set the subscription Id value to a local variable for use in various downstream activities.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Framework Orchestrator Details 03 execute",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "SubscriptionId",
					"value": {
						"value": "@activity('Get Framework Orchestrator Details 03 execute').output.firstRow.SubscriptionId",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Set Resource Group Name",
				"description": "Set the resource group name value to a local variable for use in various downstream activities.",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Framework Orchestrator Details 03 execute",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "ResourceGroupName",
					"value": {
						"value": "@activity('Get Framework Orchestrator Details 03 execute').output.firstRow.ResourceGroupName",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Get Query Run Days Value",
				"description": "Using the metadata properties table return the run days value to provide the API request with a date range for pipeline executions.",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.00:10:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderStoredProcedureName": "[metadata].[GetPropertyValue]",
						"storedProcedureParameters": {
							"PropertyName": {
								"type": "String",
								"value": "PreviousPipelineRunsQueryRange"
							}
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "GetSetMetadata",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Set Query Run Days",
				"description": "Set the query run days value to a local variable for use in various downstream activities. Default fetch current datetime -1",
				"type": "SetVariable",
				"dependsOn": [
					{
						"activity": "Get Query Run Days Value",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"variableName": "QueryRunDays",
					"value": {
						"value": "@activity('Get Query Run Days Value').output.firstRow.PropertyValue",
						"type": "Expression"
					}
				}
			}
		],
		"parameters": {
			"executionId": {
				"type": "string"
			},
			"stageId": {
				"type": "int"
			},
			"pipelineId": {
				"type": "int"
			},
			"PipelineName": {
				"type": "string"
			}
		},
		"variables": {
			"WorkerPipelineState": {
				"type": "Boolean"
			},
			"WorkerRunId": {
				"type": "String"
			},
			"WorkerCoreDetails": {
				"type": "Array"
			},
			"SubscriptionId": {
				"type": "String"
			},
			"ResourceGroupName": {
				"type": "String"
			},
			"QueryRunDays": {
				"type": "String"
			},
			"ErrorJson": {
				"type": "String"
			}
		},
		"folder": {
			"name": "ADFUniversalOrchestratorFramework"
		},
		"annotations": [
			"03-Execute"
		],
		"lastPublishTime": "2024-02-19T03:51:51Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}