# File Name: adf-ci-option-2-build-pipeline.yml
# Purpose: Build pipeline for the development Azure Data Factory 
#           Automatically triggered on completion of a pull request and merge to main branch
#           Validates the Data Factory resources 
#           Generates the ARM template and publishes for consumption via Release pipeline
# Build Pipeline Name: ADF CI Option 2 Build Pipeline

trigger:
- develop
paths:
    include:
    - cicd_proj
    exclude:
    - cicd_proj/README.md
pool:
  name: Default

variables:
  subscriptionId: '930d2a20-dc22-431d-bdde-4a2916d0096b'          # Use your subscription ID
  resourceGroup: 'adf.framework'                                                    # Use the resource group for the development data factory
  dataFactory: 'ADFUniversalOrchestratorFramework'                       # Use your development data factory name
  PackageFolder: 'cicd_proj'                                                             # Use the GIT folder under which you have the package files
  adfRootFolder: 'adf_universal_orchestrator_framework'                  # Use the GIT folder under which you have the ADF resources. If it's root leave as blank

steps:
# Installs the npm packages saved in your package.json file in the build
- task: Npm@1
  inputs:
    command: 'install'
    workingDir: '$(Build.Repository.LocalPath)/$(packageFolder)' #replace with the package.json folder
    verbose: true
  displayName: 'Install npm packages'

# Validates all of the Data Factory resources in the repository. You'll get the same validation errors as when "Validate All" is selected.
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: '$(Build.Repository.LocalPath)/$(PackageFolder)' #replace with the package.json folder
    customCommand: 'run build validate $(Build.Repository.LocalPath)/$(adfRootFolder) /subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroup)/providers/Microsoft.DataFactory/factories/$(dataFactory)'
  displayName: 'Validate Data Factory Resources'

# Generate the ARM template into the destination folder, which is the same as selecting "Publish" from the UX.
- task: Npm@1
  inputs:
    command: 'custom'
    workingDir: '$(Build.Repository.LocalPath)/$(PackageFolder)' #replace with the package.json folder
    customCommand: 'run build export $(Build.Repository.LocalPath)/$(adfRootFolder) /subscriptions/$(subscriptionId)/resourceGroups/$(resourceGroup)/providers/Microsoft.DataFactory/factories/$(dataFactory) "ArmTemplate"'
  displayName: 'Generate ARM template'

# Publish the artifact to be used as a source for a release pipeline.
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.Repository.LocalPath)/$(packageFolder)/ArmTemplate' #replace with the package.json folder
    artifact: 'ArmTemplates'
    publishLocation: 'pipeline'
  displayName: 'Publish ARM tempate'
